`include "/home/tmp/eecs151-afh/lab4/src/ALUop.v"

module ALU(
    input clk,                // Added the clock signal
    input [31:0] A, B,
    input [3:0] ALUop,
    output reg [31:0] Out,
    output reg carryout, overflow, zero
);

    always @(posedge clk) begin  // Changed to posedge for synchronous design
        reg signed [32:0] extended_result; // Extended result for overflow detection

        case (ALUop)
            // add
            4'd0: begin
                extended_result = {A[31], A} + {B[31], B};
                Out = extended_result[31:0];
                overflow = extended_result[32] ^ extended_result[31];
                zero = (Out == 0);
                carryout = extended_result[32];
            end

            // sub
            4'd1: begin
                extended_result = {A[31], A} - {B[31], B};
                Out = extended_result[31:0];
                overflow = extended_result[32] ^ extended_result[31];
                zero = (Out == 0);
                carryout = extended_result[32]; // Borrow out, not used in two's complement subtraction
            end

            // and
            4'd2: begin
                Out <= A & B;
                zero <= (Out == 0) ? 1 : 0;
                carryout <= 0;
                overflow <= 0;
            end

            // or
            4'd3: begin
                Out <= A | B;
                zero <= (Out == 0) ? 1 : 0;
                carryout <= 0;
                overflow <= 0;
            end

            // xor
            4'd4: begin
                Out <= A ^ B;
                zero <= (Out == 0) ? 1 : 0;
                carryout <= 0;
                overflow <= 0;
            end

            // slt (set less than)
            4'd5: begin
                if (A[31] == 1 && B[31] == 0) begin
                    Out <= 1;
                end else if (A[31] == 0 && B[31] == 1) begin
                    Out <= 0;
                end else begin
                    Out <= (A < B) ? 1 : 0;
                end
                overflow <= Out;
                zero <= (Out == 0) ? 1 : 0;
                carryout <= 0;
            end

            // sltu (set less than unsigned)
            4'd6: begin
                Out <= (A < B) ? 1 : 0;
                carryout <= Out;
                zero <= (Out == 0) ? 1 : 0;
                overflow <= 0;
            end

            // sll (shift left logical)
            4'd7: begin
                {carryout, Out} <= A << B;
                overflow <= 0;
                zero <= (Out == 0) ? 1 : 0;
            end

            // sra (shift right arithmetic)
            4'd8: begin
                Out <= $signed(A) >>> B;
                carryout <= A[B - 1];
                overflow <= 0;
                zero <= (Out == 0) ? 1 : 0;
            end

            // srl (shift right logical)
            4'd9: begin
                Out <= A >> B;
                carryout <= A[B - 1];
                overflow <= 0;
                zero <= (Out == 0) ? 1 : 0;
            end

            // copy_b
            4'd10: begin
                Out <= B;
                zero <= (Out == 0) ? 1 : 0;
                carryout <= 0;
                overflow <= 0;
            end


            // default or undefined operation
            4'd15: begin
                Out = 0;
                zero = (Out == 0);
                carryout = 0;
                overflow = 0;
            end
        endcase
    end

endmodule